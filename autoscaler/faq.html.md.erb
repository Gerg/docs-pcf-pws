---
title: Troubleshooting App Autoscaler
owner: App Autoscaler
---

This topic describes how to troubleshoot App Autoscaler.


## <a id='no-scale-up'></a> Autoscaler Fails to Scale App

This section describes possible causes for Autoscaler failing to scale an app that is under load. To determine the cause, see the following sections:

* [Scaling Threshold Not Reached](#scaling-threshold)

* [Metrics Average Over Collection Interval is Too Low](#lower-average)

* [App Has Reached Autoscaling Limit](#autoscaling-limit)

* [Space or Org Quota is Reached](#quota-reached)

* [Autoscaling is Disallowed](#autoscaling-disallowed)

* [TAS for VMs Components Are Failing](#platform-scale-out)

### <a id='scaling-threshold'></a> Scaling Threshold Not Reached

Validate that the autoscaling rules configured for the app should be triggered with the traffic that your app is experiencing. For example when scaling on RabbitMQ queue depth you can check the metrics emitted by RabbitMQ for that queue against the configured autoscaling rule.

### <a id='lower-average'></a> Metrics Average Over Collection Interval is Too Low

Autoscaler averages metrics over the metric collection interval. If you have a sudden spike then it may not be reflected in a scaling event until the average for the metric has also increased.

### <a id='autoscaling-limit'></a> App Has Reached Autoscaling Limit

Check that your app is not already at the maximum number of instances defined by your autoscaling limits.

You can run `cf autoscaling-events example-app` to review recent scaling events which would record an event for this situation:

```
Can not scale up. At max limit of 20 instances.
```

The minimum and maximum number of app instances configured are visible in the output of `cf autoscaling-apps`.

```
$ cf autoscaling-apps
Name          Guid                                   Enabled   Min Instances   Max Instances   Scale Up Factor   Scale Down Factor
example-app   85a6aff3-c739-4364-8df3-44f1aa50662b   true      1               20              5                 1
```

### <a id='quota-reached'></a> Space or Org Quota is Reached

Autoscaler does not record a scaling event when a quota is hit.

Review the usage of your org and space quotas to confirm that you still have quota available to launch new app instances. As well as the app Instances quota limit, make sure you check the Total Memory and Instance Memory quota limits.

For example you might have your app configured with a memory limit of 1G per app instance. The effective memory usage is _1G * number of app instances_. You can then determine which org and space quotas are assigned (with `cf org` and `cf space`) and view the total memory and instance memory available under that quota with `cf org-quota` or `cf space-quota`.

You can also try manually scaling the app to see if you encounter a quota-related error.

Operators can also enable verbose logging for Autoscaler which logs if a scaling failure is due to a quota limit. For more information, see [Using App Autoscaler in Production](productionizing-autoscaler.html).

### <a id='autoscaling-disallowed'></a> Autoscaling is Disallowed

You can confirm if autoscaling is enabled for the app in the output of `cf autoscaling-apps`.

### <a id='platform-scale-out'></a> TAS for VMs Components Are Failing

Refer to the documentation on Autoscaler Failure Modes to learn which components Autoscaler relies on. You operator may need to scale out these components in order for scaling to be reliably performed.


## <a id='underscaling'></a> App Does Not Scale to Expected Number of Instances

Autoscaler may have performed some scaling for your app, but not scaled to the level that you expected.

### <a id='check-metrics'></a> Validate the metrics you are scaling on

It's possible that the metric you are scaling on actually has a lower value than what you expect. For example if you are performing load testing and the load testing tool has its own bottleneck then you may be generating less load on the app than expected. You can validate this with your platform observability tooling.

### <a id='platform-underscaled'></a> TAS for VMs Components Are Underscaled

Underscaling can be caused by Autoscaler not having access to all of the metrics associated with your app, typically because Log Cache is underscaled.

You can see this in the output of `cf autoscaling-events` for your app, where scaling events record the value of the metric being scaled on. If the value is lower than the actual load being placed on the system then this may be due to Log Cache evicting cache entries. For more information, see [Using App Autoscaler in Production](productionizing-autoscaler.html).


## <a id='scale-to-zero'></a> Scaling To and From Zero Instances

Autoscaler does support scaling up from and down to zero instances when used with RabbitMQ.

Autoscaler does not support scale to zero with other rule types as these are dependent on metrics that are not emitted when an app has zero instances.


## <a id='healthchecks'></a> New App Instances Are Slow to Respond

Autoscaler scales my apps but the new app instances are slow to respond to requests. How do I fix this?

When a new app instance is started TAS for VMs begins routing requests to the instance once the health checks have completed successfully. If your app listens on the port quickly but takes further time to perform initalization then this can result in an unsatisfactory situation where traffic is routed to app instances that are still coming up.

If you are using **HTTP Latency** as your scaling metric, then this could have the unexpected behaviour of leading to further scaling of your app.

You can control when Diego considers an app instance healthy by configuring the health checks for the app. For more information, see [Using App Health Checks](../../devguide/deploy-apps/healthchecks.html).


## <a id='oss-autoscaler'></a> App Autoscaler for Cloud Foundry Does Not Work with TAS for VMs

App Autoscaler for TAS for VMs is not the same as the Open Source Cloud Foundry App Autoscaler project.

For example if you attempt to use the App Autoscaler CLI for Cloud Foundry [check actual name] with App Autoscaler for TAS for VMs [check actual name] you may see an error like the following:

```
Error: Invalid AutoScaler API endpoint
```

You should instead use the supported VMware Tanzu Autoscaler CLI plugin, [available on Tanzu Network](https://network.pivotal.io/products/pcf-app-autoscaler/).


## <a id='one-instance-per-space'></a> One Autoscaler Instance Allowed Per Space

Autoscaler enforces that only a single instance of the Autoscaler service should be present in a space at one time.

If you try to create more than one instance of the Autoscaler service, you see the following error:

```
$ cf create-service app-autoscaler standard autoscaler
Unexpected Response
Response code: 409
CC code:       10001
CC error code: CF-ServiceBrokerConflict
Request ID:    b3b6236b-82f5-42a7-5015-338369d5fea2::9d7c8b3a-0c4f-4935-b493-d6fe3f417f3b
Description:   Service broker error: Only One App Autoscaler Service Instance Allowed Per Space
FAILED
```

You should instead re-use the existing autoscaler service instance and bind it to the app you wish to scale.


## <a id='rabbitmq-queue-depth'></a> Autoscaler Fails to Scale Apps Based on RabbitMQ Queue Depth Metric

This section describes possible causes for Autoscaler failing to scale an app using the **RabbitMQ Queue Depth** metric as its scaling metric. To determine the cause, see the following sections:

* [Specified Queue Name in Autoscaling Rule is Incorrect](#check-rabbitmq-rule)

* [Autoscaler Does Not Support Runtime CredHub](#rabbitmq-runtime-credhub)

### <a id='check-rabbitmq-rule'></a> Specified Queue Name in Autoscaling Rule is Incorrect

Autoscaler cannot scale if the queue name specified in your autoscaling rule is incorrect. Ensure that you have provided the queue name correctly.

### <a id='rabbitmq-runtime-credhub'></a> Autoscaler Does Not Support Runtime CredHub

You may see scaling event such as the following:

```
Autoscaler did not receive any metrics for rabbitmq.queue-name during the scaling window. Scaling down is deferred until these metrics are available.
```

If the operator has enabled the **On Demand - Secure Service Instance Credentials with Runtime CredHub** in the VMware Tanzu RabbitMQ for VMs configuration [which config pane?] and also enabled **Secure service instance credentials** in the TAS for VMs configuration [WHICH CONFIG PANE?!], Autoscaler is unable to scale on queue depth for RabbitMQ service instances.

This is because Autoscaler currently relies on being able to retrieve service binding credentials for the RabbitMQ HTTP Management API from the Cloud Controller, but those credentials are not available through Cloud Controller when credentials are held in Runtime CredHub.

As an alternative you can configure your app to emit a custom metric with the RabbitMQ depth and configure autoscaler to scale on this custom metric.
