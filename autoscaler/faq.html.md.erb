---
title: Frequently Asked Questions
owner: App Autoscaler
---

## <a id="no-scale-up"></a> My application didn't scale up when I expected it to. Why not?

You've configured your autoscaling rules and your application is under load but is not scaling up as you expect. There
are a number of reasons why this may be the case:

### <a id="scaling-threshold"></a> Your scaling threshold may not have been reached

Validate that the autoscaling rules configured for the application *should* be triggered with the traffic that your
application is experiencing. For example when scaling on RabbitMQ queue depth you can check the metrics emitted by
RabbitMQ for that queue against the configured autoscaling rule.

### <a id="lower-average"></a> The average over the metric collection interval is lower

Autoscaler averages metrics over the metric collection interval. If you have a sudden spike then it may not be
reflected in a scaling event until the average for the metric has also increased.

### <a id="configured-autoscaling-limit"></a> The application is at the configured autoscaling limit

Check that your application is not already at the maximum number of instances defined by your autoscaling limits.

You can run `cf autoscaling-events example-app` to review recent scaling events which would record an event for this
situation:

```
Can not scale up. At max limit of 20 instances.
```

The minimum and maximum number of application instances configured are visible in the output of `cf autoscaling-apps`.

```
$ cf autoscaling-apps
Name          Guid                                   Enabled   Min Instances   Max Instances   Scale Up Factor   Scale Down Factor
example-app   85a6aff3-c739-4364-8df3-44f1aa50662b   true      1               20              5                 1
```

### <a id="quota-reached"></a> Quota has been reached

Autoscaler does not record a scaling event when a quota is hit.

Review the usage of your org and space quotas to confirm that you still have quota available to launch new application
instances. As well as the Application Instances quota limit, make sure you check the Total Memory and Instance Memory
quota limits.

For example you might have your application configured with a memory limit of 1G per application instance. The
effective memory usage will be *1G * number of application instances*. You can then determine which org and
space quotas are assigned (with `cf org` and `cf space`) and view the total memory and instance memory available
under that quota with `cf org-quota` or `cf space-quota`.

You can also try manually scaling the application to see if you encounter a quota-related error.

Operators can also enable verbose logging for Autoscaler which will log if a scaling failure is due to a quota limit.
See the [Using App Autoscaler in Production](productionizing-autoscaler.html) topic for more information.

### <a id="autoscaling-disabled"></a> Autoscaling is disabled

You can confirm if autoscaling is enabled for the application in the output of `cf autoscaling-apps`.

### <a id="platform-scale-out"></a> The platform may be experiencing issues or may need to be scaled out

Refer to the documentation on Autoscaler Failure Modes to learn which components Autoscaler relies on.
You operator may need to scale out these components in order for scaling to be reliably performed.

## <a id="underscaling"></a> My application didn't scale up to the level I expected it to. Why not?

Autoscaler may have performed some scaling for your application, but not scaled to the level that you expected.

### <a id="check-metrics"></a> Validate the metrics you are scaling on

It's possible that the metric you are scaling on actually has a lower value than what you expect.
For example if you are performing load testing and the load testing tool has its own bottleneck then
you may be generating less load on the application than expected. You can validate this with your
platform observability tooling.

### <a id="platform-underscaled"></a> Your platform may be underscaled

Underscaling can be caused by Autoscaler not having access to all of the metrics associated with your application,
typically because Log Cache is underscaled.

You can see this in the output of `cf autoscaling-events` for your application, where scaling events will record the
value of the metric being scaled on. If the value is lower than the actual load being placed on the system then this may
be due to Log Cache evicting cache entries. Refer to the [Using App Autoscaler in Production](productionizing-autoscaler.html)
topic for more information.

## <a id="scale-to-zero"></a> Can I scale an application up from zero instances (scale to zero) with Autoscaler?

Autoscaler does support scaling up from and down to zero instances when used with RabbitMQ.

Autoscaler does not support scale to zero with other rule types as these are dependent on metrics that are not
emitted when an application has zero instances.

## <a id="healthchecks"></a> Autoscaler scales my applications but the new application instances are slow to respond to requests. How do I fix this?

When a new application instance is started Tanzu Application Service will begin routing requests to the instance once
the health checks have completed successfully. If your application listens on the port quickly but takes further time to
perform initalization then this can result in an unsatisfactory situation where traffic is routed to application
instances that are still coming up.

If you are scaling on HTTP Latency then this could have the unexpected behaviour of leading to further scaling of your
application.

You can control when Diego considers an application instance healthy by configuring the health checks for
the application. Refer to the documentation topic [Using App Health
Checks](../../devguide/deploy-apps/healthchecks.html) for more information.

## <a id="oss-autoscaler"></a> Is this autoscaler the same autoscaler as the autoscaler under the Cloud Foundry project?

The Tanzu Application Service autoscaler is not based on the Open Source Cloud Foundry App Autoscaler project.

For example if you attempt to use the Open Source Cloud Foundry App Autoscaler CLI with the TAS Autoscaler you
may see an error like the following:

```
Error: Invalid AutoScaler API endpoint
```

You should instead use the supported VMware Tanzu Autoscaler CLI plugin, [available on Tanzu
Network](https://network.pivotal.io/products/pcf-app-autoscaler/).

## <a id="one-instance-per-space"></a> I can't create more than one instance of the autoscaler in a space. What should I do?

Autoscaler enforces that only a single instance of the Autoscaler service should be present in a space at one time.

If you try to create more than one instance of the Autoscaler service you will see the following error:

```
$ cf create-service app-autoscaler standard autoscaler
Unexpected Response
Response code: 409
CC code:       10001
CC error code: CF-ServiceBrokerConflict
Request ID:    b3b6236b-82f5-42a7-5015-338369d5fea2::9d7c8b3a-0c4f-4935-b493-d6fe3f417f3b
Description:   Service broker error: Only One App Autoscaler Service Instance Allowed Per Space
FAILED
```

You should instead re-use the existing autoscaler service instance and bind it to the application you wish to scale.

## <a id="rabbitmq-queue-depth"></a> I've tried to configure an application to scale on RabbitMQ queue depth but it's not working.

### <a id="check-rabbitmq-rule"></a> Confirm that the queue specified in your autoscaling rule is correct

Autoscaler will be unable to scale if the queue name specified in your autoscaling rule is incorrect. Double-check that
you have provided the queue name correctly.

### <a id="rabbitmq-runtime-credhub"></a> Autoscaler does not support Runtime CredHub

You may see scaling event such as the following:

```
Autoscaler did not receive any metrics for rabbitmq.queue-name during the scaling window. Scaling down will be deferred until these metrics are available.
```

If the operator has enabled the "On Demand - Secure Service Instance Credentials with Runtime CredHub" in the VMware
Tanzu RabbitMQ for VMs configuration and also enabled "Secure service instance credentials" in the Tanzu Application
Service configuration then Autoscaler will be unable to scale on queue depth for RabbitMQ service instances.

This is because Autoscaler currently relies on being able to retrieve service binding credentials for the RabbitMQ HTTP
Management API from the Cloud Controller, but those credentials are not available via Cloud Controller when credentials
are held in Runtime CredHub.

As an alternative you can configure your application to emit a custom metric with the RabbitMQ depth and configure
autoscaler to scale on this custom metric.
