---
title: Troubleshooting App Autoscaler
owner: App Autoscaler
---

This topic describes how to troubleshoot App Autoscaler.


## <a id='no-scale-up'></a> Autoscaler Fails to Scale App

This section describes possible causes for Autoscaler failing to scale an app that is under load [find a better way to say this]. To determine the cause, see the following sections:

* [Scaling Threshold Not Reached](#scaling-threshold)

* [Metrics Average Over Collection Interval is Too Low](#lower-average)

* [App Has Reached Autoscaling Limit](#autoscaling-limit)

* [Space or Org Quota is Reached](#quota-reached)

* [Autoscaling is Disallowed](#autoscaling-disallowed)

* [TAS for VMs Components Are Failing](#platform-scale-out)

### <a id='scaling-threshold'></a> Scaling Threshold Not Reached

Confirm that you configured the autoscaling rules for the app to respond to the traffic that the app is receiving as you expect. For example, when you use the
RabbitMQ queue depth as your scaling metric, you can compare the metrics that RabbitMQ emits for the specified queue to the autoscaling rules you configured.
If the autoscaling rules are not configured as expected, adjust them accordingly.

### <a id='lower-average'></a> Metrics Average Over Collection Interval is Too Low

Autoscaler averages metrics over the metric collection interval you configure in the **App Autoscaler** pane of the TAS for VMs tile.

If the number of metrics suddenly increase, the increase may not be reflected in an autoscaling event until the average for the metric increases.

### <a id='autoscaling-limit'></a> App Has Reached Autoscaling Limit

The number of instances for the app may have already reached the upper scaling limit you configured.

To determine whether the app has reached the maximum number of instances:

1. In a terminal window, run:

    ```
    cf autoscaling-events APP-NAME
    ```
    Where `APP-NAME` is the name of your app.
    <br>
    <br>
    If Autoscaler has attempted to scale the app above the configured upper scaling limit, an event description similar to the example below appears in the
    terminal output:
    <pre class='terminal'>Can not scale up. At max limit of 20 instances.</pre>

1. To review the upper and lower scaling limits you configured for the app, run:

    ```
    cf autoscaling-apps
    ```
    The above command returns output similar to the example below:
    <pre class='terminal'>
    Name          Guid                                   Enabled   Min Instances   Max Instances   Scale Up Factor   Scale Down Factor
    example-app   85a6aff3-c739-4364-8df3-44f1aa50662b   true      1               20              5                 1
    </pre>

To resolve this issue, you can configure a higher upper scaling limit for the app. For more information, see [Setting Autoscaling
Limits](productionizing-autoscaler#autoscaling-limits) in _Using App Autoscaler in Production_.

### <a id='quota-reached'></a> Space or Org Quota is Reached

The app may have already reached the number of app instances or used the amount of memory that the quota plan for the space or org allows. When an app reaches a resource quota for the space or org in which it is deployed, Autoscaler does not record an autoscaling event. [Does "does not record an autoscaling event" mean that the autoscaling failure itself doesn't appear in the list of recorded events, or that Autoscaler doesn't even attempt to scale in the first place?]

In order for Autoscaler to scale the number of app instances up to the upper scaling limit you configure, the quota plans for both the space and org must have enough of the following resources available for the app to use:

* **App Instances:** The number of instances allowed per app.

* **Total Memory:** The total amount of memory allowed for all app instances in the space or org.

* **Instance Memory:** The amount of memory allowed per app instance.

For example, if your app is configured with a memory limit of 1G per app instance, and the upper scaling limit you configured is 20 app instances, 20G of memory must be available in your space or org quota. Otherwise, Autoscaler cannot scale the app up to the upper scaling limit.

Review the quotas for your space and org and space to ensure that there are enough resources available in their quota plans for Autoscaler to create new app instances.

To review the available resource quotas for your space and org:

1. In a terminal window, review the available resource quotas for the space in which the app is deployed by running:

    ```
    cf space-quota
    ```

1. Review the available resource quotas for the org in which the app is deployed by running:

    ```
    cf org-quota
    ```

You can also try manually scaling the app to see if you encounter a quota-related error. [How?]

Operators can also allow verbose logging for Autoscaler, which logs if an autoscaling failure occurs as a result of reaching a quota limit. For more information, see [Using App Autoscaler in Production](productionizing-autoscaler.html).

### <a id='autoscaling-disallowed'></a> Autoscaling is Disallowed

In order for Autoscaler to function in a TAS for VMs deployment, the **App Autoscaler Errand** must be set to **On** in the **Errands** pane of the TAS for VMs tile, and autoscaling must be allowed for the apps you want to autoscale.

To see whether autoscaling is allowed for the apps you want to scale:

1. In a terminal window, run:

    ```
    cf autoscaling-apps
    ```
    The above command returns output similar to the following example:
    <pre class=terminal>
    Presenting autoscaler apps in org my-org / space my-space as user
    Name                  Guid                                      Enabled   Min Instances   Max Instances   Scale Up Factor   Scale DownFactor
    test-app              d0077dc5-34bd-42c7-b377-e0fcb14d67f3      true      1               4               1                 1
    test-app-2            3f8c6e84-0b6e-4ec9-9335-0aad3979d672      false     10              40              5                 2
    OK
    </pre>
    If autoscaling is allowed for a particular app, the value shown in the `Enabled` column of the terminal output is `true`. If autoscaling is disallowed for a particular app, the value shown in the `Enabled` column of the terminal output is `false`.

To allow autoscaling for an app, choose one of the following options:

* Allow autoscaling for the app through either the App Autoscaler CLI or Apps Manager. To allow autoscaling for an app through the App Autoscaler CLI, see [Enable Autoscaling](using-autoscaler-cli.html#enable-autoscaling) in _Using the App Autoscaler CLI_ To allow autoscaling for an app through Apps Manager, see [Create and Bind the App Autoscaler Service](using-autoscaler.html#create-bind-service) in _Scaling an App Using App Autoscaler_.

* Ensure that the **App Autoscaler Errand** is set to **On** in the **Errands** pane of the TAS for VMs tile. To configure the **App Autoscaler Errand** to allow Autoscaler to run, see [Configure Errands](../../operating/configure-pas.html#errands) in _Configuring TAS for VMs_.

### <a id='platform-scale-out'></a> TAS for VMs Components Are Failing

Refer to the documentation on Autoscaler Failure Modes to learn which components Autoscaler relies on. You operator may need to scale out these components in order for scaling to be reliably performed.


## <a id='underscaling'></a> App Does Not Scale to Expected Number of Instances

Autoscaler may have performed some scaling for your app, but not scaled to the level that you expected.

### <a id='check-metrics'></a> Validate the metrics you are scaling on

It's possible that the metric you are scaling on actually has a lower value than what you expect. For example if you are performing load testing and the load testing tool has its own bottleneck then you may be generating less load on the app than expected. You can validate this with your platform observability tooling.

### <a id='platform-underscaled'></a> TAS for VMs Components Are Underscaled

Underscaling can be caused by Autoscaler not having access to all of the metrics associated with your app, typically because Log Cache is underscaled.

You can see this in the output of `cf autoscaling-events` for your app, where scaling events record the value of the metric being scaled on. If the value is lower than the actual load being placed on the system then this may be due to Log Cache evicting cache entries. For more information, see [Using App Autoscaler in Production](productionizing-autoscaler.html).


## <a id='scale-to-zero'></a> Scaling To and From Zero Instances

Autoscaler does support scaling up from and down to zero instances when used with RabbitMQ.

Autoscaler does not support scale to zero with other rule types as these are dependent on metrics that are not emitted when an app has zero instances.


## <a id='healthchecks'></a> New App Instances Are Slow to Respond

Autoscaler scales my apps but the new app instances are slow to respond to requests. How do I fix this?

When a new app instance is started TAS for VMs begins routing requests to the instance once the health checks have completed successfully. If your app listens on the port quickly but takes further time to perform initalization then this can result in an unsatisfactory situation where traffic is routed to app instances that are still coming up.

If you are using **HTTP Latency** as your scaling metric, then this could have the unexpected behaviour of leading to further scaling of your app.

You can control when Diego considers an app instance healthy by configuring the health checks for the app. For more information, see [Using App Health Checks](../../devguide/deploy-apps/healthchecks.html).


## <a id='oss-autoscaler'></a> App Autoscaler for Cloud Foundry Does Not Work with TAS for VMs

App Autoscaler for TAS for VMs is not the same as the Open Source Cloud Foundry App Autoscaler project.

For example if you attempt to use the App Autoscaler CLI for Cloud Foundry [check actual name] with App Autoscaler for TAS for VMs [check actual name] you may see an error like the following:

```
Error: Invalid AutoScaler API endpoint
```

You should instead use the supported VMware Tanzu Autoscaler CLI plugin, [available on Tanzu Network](https://network.pivotal.io/products/pcf-app-autoscaler/).


## <a id='one-instance-per-space'></a> One Autoscaler Instance Allowed Per Space

Autoscaler enforces that only a single instance of the Autoscaler service should be present in a space at one time.

If you try to create more than one instance of the Autoscaler service, you see the following error:

```
$ cf create-service app-autoscaler standard autoscaler
Unexpected Response
Response code: 409
CC code:       10001
CC error code: CF-ServiceBrokerConflict
Request ID:    b3b6236b-82f5-42a7-5015-338369d5fea2::9d7c8b3a-0c4f-4935-b493-d6fe3f417f3b
Description:   Service broker error: Only One App Autoscaler Service Instance Allowed Per Space
FAILED
```

You should instead re-use the existing autoscaler service instance and bind it to the app you wish to scale.


## <a id='rabbitmq-queue-depth'></a> Autoscaler Fails to Scale Apps Based on RabbitMQ Queue Depth Metric

This section describes possible causes for Autoscaler failing to scale an app using the **RabbitMQ Queue Depth** metric as its scaling metric. To determine the cause, see the following sections:

* [Specified Queue Name in Autoscaling Rule is Incorrect](#check-rabbitmq-rule)

* [Autoscaler Does Not Support Runtime CredHub](#rabbitmq-runtime-credhub)

### <a id='check-rabbitmq-rule'></a> Specified Queue Name in Autoscaling Rule is Incorrect

Autoscaler cannot scale if the queue name specified in your autoscaling rule is incorrect. Ensure that you have provided the queue name correctly.

### <a id='rabbitmq-runtime-credhub'></a> Autoscaler Does Not Support Runtime CredHub

You may see scaling event such as the following:

```
Autoscaler did not receive any metrics for rabbitmq.queue-name during the scaling window. Scaling down is deferred until these metrics are available.
```

If the operator has enabled the **On Demand - Secure Service Instance Credentials with Runtime CredHub** in the VMware Tanzu RabbitMQ for VMs configuration [which config pane?] and also enabled **Secure service instance credentials** in the TAS for VMs configuration [WHICH CONFIG PANE?!], Autoscaler is unable to scale on queue depth for RabbitMQ service instances.

This is because Autoscaler currently relies on being able to retrieve service binding credentials for the RabbitMQ HTTP Management API from the Cloud Controller, but those credentials are not available through Cloud Controller when credentials are held in Runtime CredHub.

As an alternative you can configure your app to emit a custom metric with the RabbitMQ depth and configure autoscaler to scale on this custom metric.
