---
title: Scheduled Limit Changes
owner: Autoscaler
---

This topic describes scheduled limit changes in App Autoscaler.


## <a id='overview'></a> Overview of Scheduled Limit Changes

When you create scaling limits for an app, you define the minimum and maximum number of instances that Autoscaler is allowed to create for an app. When you
configure scheduled limit changes for an app, Autoscaler can change these scaling limits according to a schedule that you define.

VMware recommends that you configure scheduled limit changes when you can reasonably predict how many instances your apps require during any given period of
time. The following list describes common use cases for scheduled limit changes:

* You can pre-emptively scale for an expected period of high traffic by increasing the upper scaling limit to a higher value than what Autoscaler might select
based on the configured scaling metrics.

* You can reduce redundant resource usage during expected periods of low traffic by reducing the lower scaling limit during those periods.

* You can control resource usage during periods in which users can tolerate the effects of an overloaded app by reducing the upper scaling limit during those
periods.

If you want to ensure that Autoscaler creates enough instances of an app to handle the amount of traffic that it receives at any given time, but the amount of
traffic that the app receives is less predictable, you can change the scaling factors for the app. Setting a higher scale-up factor can help ensure that
Autoscaler scales up quickly enough to sufficiently handle a high amount of traffic. For more information, see [Update Scaling
Factors](using-autoscaler-cli.html#updating-scaling-factors) in _Using the App Autoscaler CLI_.

VMware recommends that you load-test your app to verify that the scheduled limit changes you configured are effective. For more information, see [Load-Testing
Your App](productionizing-autoscaler.html#load-testing) in _Using Autoscaler in Production_.

To configure or review scheduled limit changes in Autoscaler, see the sections below:

* [Configuring Scheduled Limit Changes Through the cf CLI](#cf-cli-config)

* [Configuring Scheduled Limit Changes Through Apps Manager](#apps-manager-config)

* [Reviewing Autoscaling Events for Scheduled Limit Changes](#review-events)


## <a id='cf-cli-config'></a> Configuring Scheduled Limit Changes Through the cf CLI

The procedures in this section describe how to configure scheduled limit changes for Autoscaler through the Cloud Foundry Command-Line Interface (cf CLI).

You can configure scheduled limit changes in the following ways:

* Using a manifest file. For more information, see [Configure Scheduled Limit Changes Using a Manifest File](#cf-cli-manifest-config) below.

* Using CLI commands. For more information, see [Configure Scheduled Limit Changes Using CLI Commands](#cf-cli-commands-config) below.

For the procedures in this section, you must use the App Autoscaler CLI plugin. To download and install the App Autoscaler CLI plugin, see [Install the App
Autoscaler CLI Plugin](using-autoscaler-cli.html#install) in _Using the App Autoscaler CLI_.

### <a id='cf-cli-manifest-config'></a> Configure Scheduled Limit Changes Using a Manifest File

You can configure scheduled limit changes declaratively through a manifest file. This manifest file only configures Autoscaler, and does not interfere with
any other existing app manifest files in your TAS for VMs deployment.

To configure scheduled limit changes using a manifest file:

1. In a terminal window, target the space in which the app you want to scale is deployed by running:

    ```
    cf target -o ORG-NAME -s SPACE-NAME
    ```
    Where:
    * `ORG-NAME` is the name of the org containing the space in which the app you want to scale is deployed.
    * `SPACE-NAME` is the name of the space in which the app you want to scale is deployed.

1. If the space in which the app you want to scale is deployed does not already have a service instance of Autoscaler deployed in it, create an Autoscaler
service instance by running:

    ```
    cf create-service app-autoscaler PLAN-NAME SERVICE-NAME
    ```
    Where:
    * `PLAN-NAME` is the name of the service plan you want to use for the Autoscaler service instance.
    * `SERVICE-INSTANCE-NAME` is the name you want to give the Autoscaler service instance. For example, `autoscaler`.
    <br>
    <br>
    If there is already an Autoscaler service instance in the space in which the app you want to scale is deployed, skip this step.

1. Bind the Autoscaler service instance to the app you want to scale by running:

    ```
    cf bind-service APP-NAME SERVICE-INSTANCE-NAME
    ```
    Where:
    * `APP-NAME` is the name of the app you want to scale.
    * `SERVICE-INSTANCE-NAME` is the name of the Autoscaler service instance.

For an example of a manifest file that configures scheduled limit changes, see [Examples of Recurrence
Specification](using-autoscaler-cli.html#scheduled-limit-examples) in _Using the App Autoscaler CLI_.

### <a id='cf-cli-commands-config'></a> Configure Scheduled Limit Changes Using CLI Commands

To configure scheduled limit changes using CLI commands:

1. In a terminal window, target the space in which the app you want to scale is deployed by running:

    ```
    cf target -o ORG-NAME -s SPACE-NAME
    ```
    Where:
    * `ORG-NAME` is the name of the org containing the space in which the app you want to scale is deployed.
    * `SPACE-NAME` is the name of the space in which the app you want to scale is deployed.

1. If the space in which the app you want to scale is deployed does not already have a service instance of Autoscaler deployed in it, create an Autoscaler
service instance by running:

    ```
    cf create-service app-autoscaler PLAN-NAME SERVICE-INSTANCE-NAME
    ```
    Where:
    * `PLAN-NAME` is the name of the service plan you want to use for the Autoscaler service instance.
    * `SERVICE-INSTANCE-NAME` is the name you want to give the Autoscaler service instance. For example, `autoscaler`.
    <br>
    <br>
    If there is already an Autoscaler service instance in the space in which the app you want to scale is deployed, skip this step.

1. Bind the Autoscaler service instance to the app you want to scale by running:

    ```
    cf bind-service APP-NAME SERVICE-INSTANCE-NAME
    ```
    Where:
    * `APP-NAME` is the name of the app you want to scale.
    * `SERVICE-INSTANCE-NAME` is the name of the Autoscaler service instance.

1. Configure upper and lower scaling limits for the app by running:

    ```
    cf update-autoscaling-limits APP-NAME LOWER-SCALING-LIMIT UPPER-SCALING-LIMIT
    ```
    Where:
    * `APP-NAME` is the name of the app.
    * `LOWER-SCALING-LIMIT` is the minimum number of instances you want Autoscaler to create for the app.
    * `UPPER-SCALING-LIMIT` is the maximum number of instances you want Autoscaler to create for the app.

1. Allow Autoscaler to begin making scaling decisions for the app by running:

    ```
    cf enable-autoscaling APP-NAME
    ```
    Where `APP-NAME` is the name of the app.

1. Create a scheduled limit change by running:

    ```
    cf create-autoscaling-slc APP-NAME TIME LOWER-SCALING-LIMIT UPPER-SCALING-LIMIT --recurrence DAY-1,DAY-2,DAY-3
    ```
    Where:
    * `APP-NAME` is the name of the app.
    * `TIME` is the time, in UTC timestamp format, at which you want Autoscaler to apply the scheduled limit change. For example, `2032-01-01T20:00:00Z`.
      <p class='note'><strong>Note:</strong> If the value that you configure for <code>TIME</code> is your local time converted to UTC time, and Daylight
        Saving Time is observed in your time zone, the UTC offset for your time zone may change during the year.</p>
    * `LOWER-SCALING-LIMIT` is the minimum number of instances you want Autoscaler to create for the app during the scheduled limit change. If the current
    number of app instances is fewer than this number at the time of the scheduled limit change, Autoscaler scales the number of app instances up to this
    number.
    * `UPPER-SCALING-LIMIT` is the maximum number of instances you want Autoscaler to create for the app during the scheduled limit change. If the current
    number of app instances is greater than this number at the time of the scheduled limit change, Autoscaler scales the number of app instances down to this
    number.
    * (Optional) Include the `--recurrence` parameter to specify the days of the week on which you want Autoscaler to re-apply the scheduled limit change,
    where `DAY-1`, `DAY-2`, `DAY-3`, and so on are the days you want to specify. Valid values are `Mo`, `Tu`, `We`, `Th`, `Fr`, `Sa`, or `Su`. For example, if
    you want Autoscaler to re-apply the scheduled limit change on Monday, Wednesday, Friday, and Saturday, include `--recurrence Mo,We,Fr,Sa` in the above
    command.


## <a id='apps-manager-config'></a> Configuring Scheduled Limit Changes Through Apps Manager

To configure scheduled limit changes through Apps Manager, see [Create or Modify Scheduled Limit Changes](using-autoscaler.html#schedule) in _Scaling an App
Using App Autoscaler_.


## <a id='review-events'></a> Reviewing Autoscaling Events for Scheduled Limit Changes

When Autoscaler applies a scheduled limit change, it records an autoscaling event. If the current number of app instances is under the lower scaling limit of
the scheduled limit change, Autoscaler scales the number of app instances up to the lower scaling limit and records a separate autoscaling event.

You can review the autoscaling events that Autoscaler records for scheduled limit changes in the following ways:

* Through the cf CLI. For more information, see [Review Autoscaling Events for Scheduled Limit Changes Through the cf CLI](#review-events-cli) below.

* Through Apps Manager. For more information, see [Review Autoscaling Events for Scheduled Limit Changes Through Apps Manager](#review-events-apps-manager)
below.

### <a id='review-events-cli'></a> Review Autoscaling Events for Scheduled Limit Changes Through the cf CLI

To review the autoscaling events that Autoscaler records for scheduled limit changes through the cf CLI:

1. In a terminal window, run:

    ```
    cf autoscaling-events APP-NAME
    ```
    Where `APP-NAME` is the name of the app for which you want to review autoscaling events.
    <br>
    <br>
    If Autoscaler has recorded autoscaling events for scheduled limit changes, the above command returns output that contains autoscaling events similar to
    the following example:
    <pre class='terminal'>
    Time                   Description
    2022-05-26T21:32:17Z   Scaling from 10 to 20 instances: app below minimum instance limit
    2022-05-26T21:31:50Z   Rule Applied: Scaling Limits set to 20 to 100 instances
    </pre>

### <a id='review-events-apps-manager'></a> Review Autoscaling Events for Scheduled Limit Changes Through Apps Manager

To review the autoscaling events that Autoscaler records for scheduled limit changes through Apps Manager:

1. Log in to Apps Manager.<% if not vars.platform_code == 'TAS' %> For more information, see [Logging In to Apps Manager](../../operating/console-login.html).<% end %>

1. Select the org that contains the space in which the app you want to scale is deployed.

1. Select the space in which the app you want to scale is deployed.

1. Under **Processes and Instances**, click **Manage Autoscaling**.

1. Under **Event History**, click **View More**. A list of autoscaling events appears. If Autoscaler has recorded autoscaling events for scheduled limit
changes, the list of autoscaling events includes events similar to the following example:

    ```
    Scaling from 10 to 20 instances: app below minimum instance limit
    Rule Applied: Scaling Limits set to 20 to 100 instances
    ```
