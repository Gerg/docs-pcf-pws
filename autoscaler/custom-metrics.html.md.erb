---
title: Using Custom Metrics
owner: Autoscaler
---

This topic describes how to use custom metrics in Autoscaler scaling rules.

## <a id="overview"></a> Overview of Custom Metrics

Autoscaler supports a useful set of default metrics, but your app may have specific autoscaling requirements that are not met by the default metrics. Using custom metrics, you can choose your own metrics to expose from an app.

> **Note:** This topic describes how to configure Autoscaler to scale on custom metrics. For information about how to emit
custom metrics, see [Using Metric Registrar](../../metric-registrar/using.html).

Custom metrics provide a flexible way to define scaling rules in Autoscaler. For example, using custom metrics, you can:

- Scale on a metric specific to your business, such as number of business transactions per second
- If you are using Spring Boot, scale on the [built-in supported
metrics](https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics.supported), such as JVM metrics
- Implement your own predictive logic for scaling demand, and scale on that

For caveats to scaling on custom metrics, see [Caveats](#caveats).

## <a id="configure-autoscaler"></a> Configure a Custom Metric as the Scaling Metric for an App

The procedures in this section describe how to configure Autoscaler to use a custom metric as the scaling metric for an app. You can configure Autoscaler in the
following ways:

* Using the App Autoscaler Command-Line Interface (CLI). For more information, see [Configure Autoscaler Using the App Autoscaler CLI](#cli).

* Using Apps Manager. For more information, see [Configure Autoscaler Using Apps Manager](#apps-manager).

### <a id="cli"></a> Configure Autoscaler Using the App Autoscaler CLI

This documentation makes use of Autoscaler-specific commands provided by the Autoscaler CLI plugin.

To use these commands you will need to download and install the CLI plugin,
which is [available on Tanzu
Network](https://network.pivotal.io/products/pcf-app-autoscaler/).

You can choose to configure Autoscaler declaratively with a manifest file, or with individual
commands.

#### <a id="manifest"></a> Create a Manifest File

To declaratively specify Autoscaler configuration, you can create an Autoscaler manifest file.

> **Note:** An Autoscaler manifest file is separate from an app manifest file, and is only used for Autoscaler configuration.

To configure Autoscaler using a manifest file:

1. Create an Autoscaler instance in the same space as the app that you want Autoscaler to scale:

    ```sh
    cf create-service app-autoscaler PLAN-NAME SERVICE-NAME
    ```
    Where:
    * `PLAN-NAME` is the name of the service plan to use for the Autoscaler service instance.
    * `SERVICE-NAME` is the name of the service instance.

    For example:

    ```sh
    $ cf create-service app-autoscaler standard autoscaler
    ```

1. Bind the Autoscaler instance to the app:

    ```sh
    cf bind-service APP-NAME autoscaler
    ```
    Where `APP-NAME` is the name of the app you want Autoscaler to scale.

    For example:

    ```sh
    $ cf bind-service example-app autoscaler
    ```

1. Create the Autoscaler manifest file:

    ```yaml
    ---
    instance_limits:
      min: 10
      max: 100
    rules:
    - rule_type: custom
      metric: my_metric_name
      threshold:
        min: 20
        max: 50
    scheduled_limit_changes: []
    ```

    This manifest defines a `custom` rule and configures three settings:

    1. The minimum threshold (`threshold.min`). If the average value of the custom
       metric drops below this number, Autoscaler scales the app down. In this example, the
       minimum threshold is set to 20.
    1. The maximum threshold (`threshold.max`). If the average value of your custom
       metric rises above this number, Autoscaler scales the app up. In this example, the
       maximum threshold is set to 50.
    1. The name of the custom metric (`metric`). This must match the name of the metric
       exposed by the app. In this example, the metric name is `my_metric_name`.

    > **Note:** Before configuring Autoscaler to use a custom metric, you must register the app's metrics endpoint with Metric Registrar.

    The manifest also specifies a minimum instance limit of 10 and a maximum instance limit of 100.

1. Apply the Autoscaler manifest for your app:

    ```sh
    cf configure-autoscaling APP-NAME MANIFEST-FILENAME
    ```
    Where:
    * `APP-NAME` is the name of the app that you want Autoscaler to scale.
    * `MANIFEST-FILENAME` is the filename of the Autoscaler manifest.

    For example:

    ```sh
    $ cf configure-autoscaling example-app autoscaler-manifest.yaml
    ```

VMware recommends that you perform load testing of your app to verify that your configured rules are correct. For more information, see [Using App Autoscaler in Production](productionizing-autoscaler.html).

When scaling, Autoscaler records the observed average value of the custom metric in the scaling event. For example:

```sh
$ cf autoscaling-events example-app

Time                   Description
2022-05-25T23:13:27Z   Scaled up from 10 to 11 instances. Current your_metric_name of 60.83 is above upper threshold of 50.00.
```

#### <a id="term-commands"></a> Use Terminal Commands

You can configure Autoscaler to use a custom metric using cf CLI commands.

To configure using the cf CLI:

1. Create an Autoscaler instance in the same space as the app that you want Autoscaler to scale:

    ```sh
    cf create-service app-autoscaler PLAN-NAME SERVICE-NAME
    ```
    Where:
    * `PLAN-NAME` is the name of the service plan to use for the Autoscaler service instance.
    * `SERVICE-NAME` is the name of the service instance.

    For example:

    ```sh
    $ cf create-service app-autoscaler standard autoscaler
    ```

1. Bind the Autoscaler instance to the app:

    ```sh
    cf bind-service APP-NAME autoscaler
    ```
    Where `APP-NAME` is the name of the app that you want Autoscaler to scale.

    For example:

    ```sh
    $ cf bind-service example-app autoscaler
    ```

1. Update autoscaling limits for the app that you want to scale:

    ```sh
    cf update-autoscaling-limits APP-NAME MIN-INSTANCE-LIMIT MAX-INSTANCE-LIMIT
    ```
    Where:
    * `APP-NAME` is the name of the app that you want Autoscaler to scale.
    * `MIN-INSTANCE-LIMIT` is the minimum instance limit.
    * `MAX-INSTANCE-LIMIT` is the maximum instance limit.

    For example:

    ```sh
    $ cf update-autoscaling-limits example-app 10 100
    ```

1. Enable autoscaling for the app:

    ```sh
    cf enable-autoscaling APP-NAME
    ```
    Where `APP-NAME` is the name of the app that you want Autoscaler to scale.

    For example:

    ```sh
    $ cf enable-autoscaling example-app
    ```

1. Add a `custom` rule:

    ```sh
    cf create-autoscaling-rule APP-NAME custom MIN MAX --metric METRIC-NAME
    ```
    Where:
    * `APP-NAME` is the name of the app that you want Autoscaler to scale.
    * `MIN` is the minimum threshold. If the average value of the custom metric drops below this number,
   Autoscaler scales the app down.
    * `MAX` is the maximum threshold. If the average value of the custom metric rises above this number, 
   Autoscaler scales the app up.
    * `METRIC-NAME` is the name of the custom metric. This must match the name of the metric
       exposed by the app.

    > **Note:** Before configuring Autoscaler to use a custom metric, you must register the app's metrics endpoint with Metric Registrar.

    For example:

    ```sh
    $ cf create-autoscaling-rule example-app custom 10 50 --metric my_metric_name
    ```

VMware recommends that you perform load testing of your app to verify that your configured rules are correct. For more information, see [Using App Autoscaler in Production](productionizing-autoscaler.html).

When scaling, Autoscaler records the observed average value of the custom metric in the scaling event. For example:

```
$ cf autoscaling-events example-app

Time                   Description
2022-05-25T23:13:27Z   Scaled up from 10 to 11 instances. Current your_metric_name of 60.83 is above upper threshold of 50.00.
```

### <a id="apps-manager"></a> Configure Autoscaler Using Apps Manager

To configure Autoscaler to use a custom metric as the scaling metric for an app using Apps Manager:

1. In Apps Manager, navigate to the **Manage Autoscaling** -> **Edit Scaling Rules** dialog box.

1. Select **Add Rule**.

1. Configure the fields as follows:

    | Field                                        | Instructions                                         |
    |----------------------------------------------|------------------------------------------------------|
    | <strong>Rule Type</strong>                   | Select <strong>Custom</strong>                       |
    | <strong>Scale down if less than</strong>     | Enter the minimum threshold. If the average value of the custom
   metric falls below this number, Autoscaler scales the app down. |
    | <strong>Scale up if more than</strong>       | Enter the maximum threshold. If the average value of the custom
   metric rises above this number, Autoscaler scales the app up. |
    | <strong>Metric</strong>                      | Enter the name of the custom metric to be monitored. |

1. Click **Save**.

VMware recommends that you perform load testing of your app to verify that your configured rules are correct. For more information, see [Using App Autoscaler in Production](productionizing-autoscaler.html).

When scaling, Autoscaler records the observed average value of the custom metric in the scaling event. In Apps Manager, you can view the scaling event in the Event History, under **Manage Autoscaling**. For example:

> Scaled up from 10 to 11 instances. Current my_metric_name of 60.83 is above upper threshold of 50.00.

For more information, see [Configure Autoscaling for an App](using-autoscaler.html#config).

## <a id="caveats"></a> Caveats

The following cases require special consideration when using a custom metric for autoscaling.

### <a id="metric-visibility"></a> Metric Visibility

Metric endpoints include potentially sensitive information about the state of your app.
Ensure that these endpoints are not accessible to unauthorized end users.

One solution is to have the metrics endpoint listen on a separate port. When registering
the endpoint using the Metric Registrar CLI, you can then specify the `--internal-port` option.

### <a id="counters"></a> Counters

A counter is a monotonically increasing number. Autoscaler does not support scaling based on counters.
If you register a metrics endpoint that includes counters, the counters are ingressed into the
Loggregator system, but Autoscaler does not retrieve them when requesting metrics from Log Cache.

### <a id="labels"></a> Labels

Autoscaler does not differentiate metrics based on labels. If the metrics endpoint features the same
metric with different labels (for example, to differentiate HTTP latency based on app endpoint),
Autoscaler does not recognize the labels.

### <a id="metric-load"></a> Metric Load

When adding instrumentation to an app, it may be tempting to emit a large number of metrics.
This can be valuable, but imposes a cost on the platform, which must process and handle
the additional metrics. If you are considering adding a large number of new metrics, 
notify your platform operator.

### <a id="cache-eviction"></a> Log Cache Eviction 

Custom metrics are emitted by Metric Registrar, which scrapes the metrics endpoint on the app. By
default, the interval between scrapes is 35 seconds. Operators can configure the scrape interval in
the Metric Registration configuration. For information about configuring the scrape interval, see
[Configure Metric Registrar](../../operating/configure-pas.html#metric-registrar) in
_Configuring TAS for VMs_.

Within Log Cache, each app has its own bucket, which contains both app metrics and logs. By default,
Log Cache has a maximum limit of 100,000 envelopes per source ID (app). Because the platform generates
several envelopes per request, and recent app logs are held in the same bucket, a busy app might not
have sufficient Log Cache custom metric history for Autoscaler to use in scaling decisions.

For more information, see [Using App Autoscaler in Production](productionizing-autoscaler.html).
