---
title: Troubleshooting App Autoscaler
owner: App Autoscaler
---

This topic describes how to troubleshoot App Autoscaler.


## <a id='no-scale-up'></a> Autoscaler Fails to Scale an App When Expected

This section describes possible causes for Autoscaler failing to scale an app when you expect. To determine the cause, see the following sections:

* [Scaling Threshold Not Reached](#scaling-threshold)

* [Metrics Average Over Collection Interval is Too Low](#lower-average)

* [App Has Reached Autoscaling Limit](#autoscaling-limit)

* [Space or Org Quota is Reached](#quota-reached)

* [Autoscaling is Disallowed](#autoscaling-disallowed)

* [TAS for VMs Components Are Failing](#platform-scale-out)

### <a id='scaling-threshold'></a> Scaling Threshold Not Reached

Confirm that you configured the autoscaling rules for the app to respond to the traffic that the app is receiving as you expect. For example, when you use the
RabbitMQ queue depth as your scaling metric, you can compare the metrics that VMware Tanzu RabbitMQ for VMs (RabbitMQ) emits for the specified queue to the
autoscaling rules you configured. If the autoscaling rules are not configured as expected, adjust them accordingly.

### <a id='lower-average'></a> Metrics Average Over Collection Interval is Too Low

Autoscaler averages metrics over the metric collection interval you configure in the **App Autoscaler** pane of the TAS for VMs tile.

If the number of metrics suddenly increase, the increase may not be reflected in an autoscaling event until the average for the metric increases.

### <a id='autoscaling-limit'></a> App Has Reached Autoscaling Limit

The number of instances for the app may have already reached the upper scaling limit you configured.

To determine whether the app has reached the maximum number of instances:

1. In a terminal window, run:

    ```
    cf autoscaling-events APP-NAME
    ```
    Where `APP-NAME` is the name of your app.
    <br>
    <br>
    If Autoscaler has attempted to scale the app above the configured upper scaling limit, an event description similar to the example below appears in the
    terminal output:
    <pre class='terminal'>Can not scale up. At max limit of 20 instances.</pre>

1. To review the upper and lower scaling limits you configured for the app, run:

    ```
    cf autoscaling-apps
    ```
    The above command returns output similar to the example below:
    <pre class='terminal'>
    Name          Guid                                   Enabled   Min Instances   Max Instances   Scale Up Factor   Scale Down Factor
    example-app   85a6aff3-c739-4364-8df3-44f1aa50662b   true      1               20              5                 1
    </pre>

To resolve this issue, you can configure a higher upper scaling limit for the app. For more information, see [Setting Autoscaling
Limits](productionizing-autoscaler.html#autoscaling-limits) in _Using App Autoscaler in Production_.

### <a id='quota-reached'></a> Space or Org Quota is Reached

The app may have already reached the number of app instances or used the amount of memory that the quota plan for the space or org allows. When an app reaches
a resource quota for the space or org in which it is deployed, Autoscaler does not record an autoscaling event. For more information, see [Reviewing Space and
Org Quota Plans](productionizing-autoscaler.html#quotas-limiting-scaling) in _Using App Autoscaler in Production_.

Review the quotas for your space and org and space to ensure that there are enough resources available in their quota plans for Autoscaler to create new app
instances.

To review the available resource quotas for your space and org:

1. In a terminal window, review the available resource quotas for the space in which the app is deployed by running:

    ```
    cf space-quota
    ```

1. Review the available resource quotas for the org in which the app is deployed by running:

    ```
    cf org-quota
    ```

You can also try manually scaling the app to see if you still cannot scale the app up. If scaling the app manually does not create new app instances, it is
more likely that the resource quota for your space or org has already been reached. To scale an app manually, see [Scale an App
Manually](../../console/manage-apps.html#manual-scale) in _Managing Apps and Service Instances Using Apps Manager_ or [Scaling an App Using cf
scale](../../devguide/deploy-apps/cf-scale.html).

Operators can also allow verbose logging for Autoscaler, which logs if an autoscaling failure occurs as a result of reaching a quota limit. For more
information, see [Configure Verbose Logging in Autoscaler](operating-autoscaler.html#verbose-logging) in _Operating Autoscaler_.

### <a id='autoscaling-disallowed'></a> Autoscaling is Disallowed

In order for Autoscaler to function in a TAS for VMs deployment, the **App Autoscaler Errand** must be set to **On** in the **Errands** pane of the TAS for
VMs tile, and autoscaling must be allowed for the apps you want to autoscale.

To see whether autoscaling is allowed for the apps you want to scale:

1. In a terminal window, run:

    ```
    cf autoscaling-apps
    ```
    The above command returns output similar to the following example:
    <pre class=terminal>
    Presenting autoscaler apps in org my-org / space my-space as user
    Name                  Guid                                      Enabled   Min Instances   Max Instances   Scale Up Factor   Scale DownFactor
    test-app              d0077dc5-34bd-42c7-b377-e0fcb14d67f3      true      1               4               1                 1
    test-app-2            3f8c6e84-0b6e-4ec9-9335-0aad3979d672      false     10              40              5                 2
    OK
    </pre>
    If autoscaling is allowed for a particular app, the value shown in the `Enabled` column of the terminal output is `true`. If autoscaling is disallowed for
    a particular app, the value shown in the `Enabled` column of the terminal output is `false`.

To allow autoscaling for an app, choose one of the following options:

* Allow autoscaling for the app through either the App Autoscaler CLI or Apps Manager. To allow autoscaling for an app through the App Autoscaler CLI, see
[Enable Autoscaling](using-autoscaler-cli.html#enable-autoscaling) in _Using the App Autoscaler CLI_. To allow autoscaling for an app through Apps Manager,
see [Create and Bind the App Autoscaler Service](using-autoscaler.html#create-bind-service) in _Scaling an App Using App Autoscaler_.

* Ensure that the **App Autoscaler Errand** is set to **On** in the **Errands** pane of the TAS for VMs tile. To configure the **App Autoscaler Errand** to
allow Autoscaler to run, see [Configure Errands](../../operating/configure-pas.html#errands) in _Configuring TAS for VMs_.

### <a id='platform-scale-out'></a> TAS for VMs Components Are Failing or Underscaled

Autoscaler may fail to scale an app if one of the TAS for VMs components on which it depends is failing or underscaled. For more information about these
components, see [Autoscaler Failure Modes](observability.html).

These components may need to be restarted or scaled up before Autoscaler can scale your app. To restart TAS for VMs components, see [Stopping and Starting
Individual TAS for VMs VMs](../../adminguide/start-stop-vms.html#manual) in _Stopping and Starting Virtual Machines_. To scale TAS for VMs components up, see
[Scaling Up TAS for VMs](../../operating/scaling-ert-components.html#scaleup) in _Scaling TAS for VMs_.


## <a id='underscaling'></a> App Does Not Scale to Expected Number of Instances

This section describes possible causes for Autoscaler scaling an app up to a certain number of instances, but not to the level that you expect. To determine
the cause, see the following sections:

* [Review Scaling Metric Values](#check-metrics)

* [TAS for VMs Components Are Underscaled](#platform-underscaled)

### <a id='check-metrics'></a> Review Scaling Metric Values

The values of the scaling metric you configured Autoscaler to use for your app may lower than expected. For example, if you are load-testing your app and your
load-testing tool is not working correctly, you may be generating less load on the app than expected. For more information about load-testing an app, see
[Load-Testing Your App](productionizing-autoscaler.html#load-testing) in _Using App Autoscaler in Production_.

To review the values of your scaling metric, review the observability service that you use for your TAS for VMs deployment.

### <a id='platform-underscaled'></a> TAS for VMs Components Are Underscaled

If any TAS for VMs components on which Autoscaler depends are underscaled, Autoscaler may not be able to retrieve all of the metrics associated with your app.

When Autoscaler does not retrieve the number of metrics you expect, it often means that Log Cache is underscaled. To determine whether Log Cache might be
underscaled:

1. In a terminal window, run:

    ```
    cf autoscaling-events
    ```
    The above command returns a list of scaling events that Autoscaler has recorded, which include the value of the scaling metric for your app. If the value
    is lower than the actual load that the app is processing, Log Cache may be evicting some metrics from its cache.

To fix this issue, scale the number of Log Cache instances up in the **Resource Config** pane of the TAS for VMs tile. To scale Log Cache up, see [Scaling Up
TAS for VMs](../../operating/scaling-ert-components.html#scaleup) in _Scaling TAS for VMs_.

For more information about the TAS for VMs components on which Autoscaler depends, see [Autoscaler Failure Modes](observability.html).


## <a id='scale-to-zero'></a> Scaling To and From Zero Instances

Autoscaler can scale an app to and from zero instances only when it is configured to use RabbitMQ queue depth as its scaling metric.

Because other scaling metrics are not emitted when an app has zero instance, Autoscaler cannot scale an app to and from zero instances when it is configured
to use any scaling metric other than RabbitMQ queue depth.


## <a id='slow-response'></a> New App Instances Are Slow to Respond to Requests

When Autoscaler scales an app up, the new app instances may be slow to respond to requests. As a result, if you have configured Autoscaler to use HTTP latency
as its scaling metric, Autoscaler may scale the number of app instances up even more to compensate for the slow response time of the app instances it had
previously created.

When a new app instance is created, Diego runs health checks for the app instance. After all health checks have been completed successfully, Diego considers
the app instance to be healthy. Diego then registers a route to the app instance with the Gorouter, and the Gorouter begins routing requests to the app
instance.

However, the app instance having passed all health checks may not indicate that the app instance is ready to respond to requests. Depending on the type of
health check that you have configured for the app, the Gorouter may begin to route requests to app instances that are not ready to receive requests.

The following list describes when the Gorouter begins routing requests to an app instance after each type of health check:

* If you have configured a `process` health check, the Gorouter can begin routing requests to the app instance when all processes within the app are running.

* If you have configured a `port` health check, the Gorouter can begin routing requests to the app instance when the app instance is able to receive TCP
connections, even if it is not fully initialized.

* If you have configured an `http` health check, the Gorouter can begin routing requests to the app instance when the app instance can provide an `HTTP 200`
response to the health check, which indicates that the app instance is ready to respond to HTTP requests from the Gorouter.

If the new app instances that Autoscaler has created are slow to respond to requests, you can configure Diego to run `http` health checks for your app to
ensure that the Gorouter cannot route requests to app instances before they are ready to respond.

For more information about how Diego runs an app, see [How Diego Runs an App](../../concepts/diego/diego-architecture.html#diagram) in _Diego Components and
Architecture_. For more information about app health checks, including how to configure health checks and the types of health checks you can configure, see
[Using App Health Checks](../../devguide/deploy-apps/healthchecks.html).


## <a id='oss-autoscaler'></a> App Autoscaler for Cloud Foundry Does Not Work with TAS for VMs

There are two versions of the App Autoscaler Command-Line Interface (CLI) extension for the Cloud Foundry Command-Line Interface (cf CLI):

* The VMware Tanzu App Autoscaler CLI Plugin, used with TAS for VMs

* The Cloud Foundry App Auto-Scaler plugin, used with Cloud Foundry

If you attempt to use the Cloud Foundry App Auto-Scaler plugin to control the App Autoscaler instance in your TAS for VMs deployment, you see the following
error:

<pre class='terminal'>Error: Invalid AutoScaler API endpoint</pre>

You must instead use the VMware Tanzu App Autoscaler CLI Plugin. To download the VMware Tanzu App Autoscaler CLI Plugin, go to [VMware Tanzu
Network](https://network.pivotal.io/products/pcf-app-autoscaler/).


## <a id='one-instance-per-space'></a> One Autoscaler Instance Allowed Per Space

Only one instance of Autoscaler can exist in each space in an org. If you try to create more than one instance of Autoscaler in a space, you see the following
error:

<pre class='terminal'>
Unexpected Response
Response code: 409
CC code:       10001
CC error code: CF-ServiceBrokerConflict
Request ID:    b3b6236b-82f5-42a7-5015-338369d5fea2::9d7c8b3a-0c4f-4935-b493-d6fe3f417f3b
Description:   Service broker error: Only One App Autoscaler Service Instance Allowed Per Space
FAILED
</pre>

Use the existing Autoscaler instance in your space and bind it to the app you want to autoscale. For more information, see [Create and Bind the App Autoscaler
Service](using-autoscaler.html#create-bind-service) in _Scaling an App Using App Autoscaler_.


## <a id='rabbitmq-queue-depth'></a> Autoscaler Fails to Scale Apps Based on RabbitMQ Queue Depth Metric

This section describes possible causes for Autoscaler failing to scale an app using the RabbitMQ queue depth metric as its scaling metric. To determine the
cause, see the following sections:

* [Specified Queue Name in Autoscaling Rule is Incorrect](#check-rabbitmq-rule)

* [Autoscaler Does Not Support Runtime CredHub](#rabbitmq-runtime-credhub)

### <a id='check-rabbitmq-rule'></a> Specified Queue Name in Autoscaling Rule is Incorrect

Autoscaler cannot scale an app if the RabbitMQ queue name specified in your autoscaling rule is incorrect. Ensure that the queue name you configured in the
autoscaling rule for the app is correct.

### <a id='rabbitmq-runtime-credhub'></a> Autoscaler Does Not Support Runtime CredHub

You may see the following scaling event:

<pre class='terminal'>Autoscaler did not receive any metrics for rabbitmq.queue-name during the scaling window. Scaling down is deferred until these metrics
  are available.</pre>

In order to receive RabbitMQ queue depth metrics, Autoscaler must be able to retrieve service binding credentials for the RabbitMQ HTTP Management API from
Cloud Controller. However, when a TAS for VMs deployment is configured to store credentials in Runtime CredHub, Autoscaler cannot retrieve service binding
credentials from Cloud Controller.

If the operator of your deployment has selected **Yes** under **On Demand - Secure Service Instance Credentials with Runtime CredHub** in the **Global
Settings for On-Demand Plans** pane of the VMware Tanzu RabbitMQ for VMs tile and activated the **Secure service instance credentials** checkbox in the
**CredHub** pane of the TAS for VMs tile, Autoscaler is unable to use RabbitMQ queue depth as the scaling metric for RabbitMQ service instances.

As a workaround, you can configure your app to emit a custom metric containing the RabbitMQ queue depth and configure Autoscaler to use this metric as its
scaling metric for the app. For more information about custom metrics, see [Using Custom Metrics](custom-metrics.html).
